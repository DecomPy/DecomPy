; ModuleID = 'Repositories/OpenChannelSSD-linux/Unfiltered/linux-master_Documentation_scheduler_sched-pelt.c'
source_filename = "Repositories/OpenChannelSSD-linux/Unfiltered/linux-master_Documentation_scheduler_sched-pelt.c"
target datalayout = "e-m:o-i64:64-f80:128-n8:16:32:64-S128"
target triple = "x86_64-apple-macosx10.14.0"

@.str = private unnamed_addr constant [43 x i8] c"static const u32 runnable_avg_yN_inv[] = {\00", align 1
@y = common global double 0.000000e+00, align 8
@.str.1 = private unnamed_addr constant [3 x i8] c"\0A\09\00", align 1
@.str.2 = private unnamed_addr constant [8 x i8] c"0x%8x, \00", align 1
@.str.3 = private unnamed_addr constant [6 x i8] c"\0A};\0A\0A\00", align 1
@sum = global i32 1024, align 4
@.str.4 = private unnamed_addr constant [51 x i8] c"static const u32 runnable_avg_yN_sum[] = {\0A\09    0,\00", align 1
@.str.5 = private unnamed_addr constant [5 x i8] c"%5d,\00", align 1
@n = global i32 -1, align 4
@max = global i64 1024, align 8
@.str.6 = private unnamed_addr constant [28 x i8] c"#define LOAD_AVG_PERIOD %d\0A\00", align 1
@.str.7 = private unnamed_addr constant [26 x i8] c"#define LOAD_AVG_MAX %ld\0A\00", align 1
@.str.8 = private unnamed_addr constant [54 x i8] c"static const u32 __accumulated_sum_N32[] = {\0A\09     0,\00", align 1
@.str.9 = private unnamed_addr constant [5 x i8] c"%6d,\00", align 1
@.str.10 = private unnamed_addr constant [72 x i8] c"/* Generated by Documentation/scheduler/sched-pelt; do not modify. */\0A\0A\00", align 1

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @calc_runnable_avg_yN_inv() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([43 x i8], [43 x i8]* @.str, i32 0, i32 0))
  store i32 0, i32* %1, align 4
  br label %4

; <label>:4:                                      ; preds = %22, %0
  %5 = load i32, i32* %1, align 4
  %6 = icmp slt i32 %5, 32
  br i1 %6, label %7, label %25

; <label>:7:                                      ; preds = %4
  %8 = load double, double* @y, align 8
  %9 = load i32, i32* %1, align 4
  %10 = sitofp i32 %9 to double
  %11 = call double @llvm.pow.f64(double %8, double %10)
  %12 = fmul double 0x41EFFFFFFFE00000, %11
  %13 = fptoui double %12 to i32
  store i32 %13, i32* %2, align 4
  %14 = load i32, i32* %1, align 4
  %15 = srem i32 %14, 6
  %16 = icmp eq i32 %15, 0
  br i1 %16, label %17, label %19

; <label>:17:                                     ; preds = %7
  %18 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %19

; <label>:19:                                     ; preds = %17, %7
  %20 = load i32, i32* %2, align 4
  %21 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([8 x i8], [8 x i8]* @.str.2, i32 0, i32 0), i32 %20)
  br label %22

; <label>:22:                                     ; preds = %19
  %23 = load i32, i32* %1, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* %1, align 4
  br label %4

; <label>:25:                                     ; preds = %4
  %26 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

declare i32 @printf(i8*, ...) #1

; Function Attrs: nounwind readnone speculatable
declare double @llvm.pow.f64(double, double) #2

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @calc_runnable_avg_yN_sum() #0 {
  %1 = alloca i32, align 4
  %2 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([51 x i8], [51 x i8]* @.str.4, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %3

; <label>:3:                                      ; preds = %33, %0
  %4 = load i32, i32* %1, align 4
  %5 = icmp sle i32 %4, 32
  br i1 %5, label %6, label %36

; <label>:6:                                      ; preds = %3
  %7 = load i32, i32* %1, align 4
  %8 = icmp eq i32 %7, 1
  br i1 %8, label %9, label %15

; <label>:9:                                      ; preds = %6
  %10 = load double, double* @y, align 8
  %11 = load i32, i32* @sum, align 4
  %12 = sitofp i32 %11 to double
  %13 = fmul double %12, %10
  %14 = fptosi double %13 to i32
  store i32 %14, i32* @sum, align 4
  br label %24

; <label>:15:                                     ; preds = %6
  %16 = load i32, i32* @sum, align 4
  %17 = sitofp i32 %16 to double
  %18 = load double, double* @y, align 8
  %19 = fmul double %17, %18
  %20 = load double, double* @y, align 8
  %21 = fmul double 1.024000e+03, %20
  %22 = fadd double %19, %21
  %23 = fptosi double %22 to i32
  store i32 %23, i32* @sum, align 4
  br label %24

; <label>:24:                                     ; preds = %15, %9
  %25 = load i32, i32* %1, align 4
  %26 = srem i32 %25, 11
  %27 = icmp eq i32 %26, 0
  br i1 %27, label %28, label %30

; <label>:28:                                     ; preds = %24
  %29 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %30

; <label>:30:                                     ; preds = %28, %24
  %31 = load i32, i32* @sum, align 4
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.5, i32 0, i32 0), i32 %31)
  br label %33

; <label>:33:                                     ; preds = %30
  %34 = load i32, i32* %1, align 4
  %35 = add nsw i32 %34, 1
  store i32 %35, i32* %1, align 4
  br label %3

; <label>:36:                                     ; preds = %3
  %37 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @calc_converged_max() #0 {
  %1 = alloca i64, align 8
  %2 = alloca i64, align 8
  store i64 0, i64* %1, align 8
  %3 = load double, double* @y, align 8
  %4 = fmul double 0x41EFFFFFFFE00000, %3
  %5 = fptosi double %4 to i64
  store i64 %5, i64* %2, align 8
  br label %6

; <label>:6:                                      ; preds = %22, %0
  %7 = load i32, i32* @n, align 4
  %8 = icmp sgt i32 %7, -1
  br i1 %8, label %9, label %15

; <label>:9:                                      ; preds = %6
  %10 = load i64, i64* @max, align 8
  %11 = load i64, i64* %2, align 8
  %12 = mul nsw i64 %10, %11
  %13 = ashr i64 %12, 32
  %14 = add nsw i64 %13, 1024
  store i64 %14, i64* @max, align 8
  br label %15

; <label>:15:                                     ; preds = %9, %6
  %16 = load i64, i64* %1, align 8
  %17 = load i64, i64* @max, align 8
  %18 = icmp eq i64 %16, %17
  br i1 %18, label %19, label %20

; <label>:19:                                     ; preds = %15
  br label %25

; <label>:20:                                     ; preds = %15
  %21 = load i64, i64* @max, align 8
  store i64 %21, i64* %1, align 8
  br label %22

; <label>:22:                                     ; preds = %20
  %23 = load i32, i32* @n, align 4
  %24 = add nsw i32 %23, 1
  store i32 %24, i32* @n, align 4
  br label %6

; <label>:25:                                     ; preds = %19
  %26 = load i32, i32* @n, align 4
  %27 = add nsw i32 %26, -1
  store i32 %27, i32* @n, align 4
  %28 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([28 x i8], [28 x i8]* @.str.6, i32 0, i32 0), i32 32)
  %29 = load i64, i64* @max, align 8
  %30 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([26 x i8], [26 x i8]* @.str.7, i32 0, i32 0), i64 %29)
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @calc_accumulated_sum_32() #0 {
  %1 = alloca i32, align 4
  %2 = alloca i32, align 4
  %3 = load i32, i32* @sum, align 4
  store i32 %3, i32* %2, align 4
  %4 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([54 x i8], [54 x i8]* @.str.8, i32 0, i32 0))
  store i32 1, i32* %1, align 4
  br label %5

; <label>:5:                                      ; preds = %28, %0
  %6 = load i32, i32* %1, align 4
  %7 = load i32, i32* @n, align 4
  %8 = sdiv i32 %7, 32
  %9 = add nsw i32 %8, 1
  %10 = icmp sle i32 %6, %9
  br i1 %10, label %11, label %31

; <label>:11:                                     ; preds = %5
  %12 = load i32, i32* %1, align 4
  %13 = icmp sgt i32 %12, 1
  br i1 %13, label %14, label %19

; <label>:14:                                     ; preds = %11
  %15 = load i32, i32* %2, align 4
  %16 = sdiv i32 %15, 2
  %17 = load i32, i32* @sum, align 4
  %18 = add nsw i32 %16, %17
  store i32 %18, i32* %2, align 4
  br label %19

; <label>:19:                                     ; preds = %14, %11
  %20 = load i32, i32* %1, align 4
  %21 = srem i32 %20, 6
  %22 = icmp eq i32 %21, 0
  br i1 %22, label %23, label %25

; <label>:23:                                     ; preds = %19
  %24 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([3 x i8], [3 x i8]* @.str.1, i32 0, i32 0))
  br label %25

; <label>:25:                                     ; preds = %23, %19
  %26 = load i32, i32* %2, align 4
  %27 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([5 x i8], [5 x i8]* @.str.9, i32 0, i32 0), i32 %26)
  br label %28

; <label>:28:                                     ; preds = %25
  %29 = load i32, i32* %1, align 4
  %30 = add nsw i32 %29, 1
  store i32 %30, i32* %1, align 4
  br label %5

; <label>:31:                                     ; preds = %5
  %32 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([6 x i8], [6 x i8]* @.str.3, i32 0, i32 0))
  ret void
}

; Function Attrs: noinline nounwind optnone ssp uwtable
define void @main() #0 {
  %1 = call i32 (i8*, ...) @printf(i8* getelementptr inbounds ([72 x i8], [72 x i8]* @.str.10, i32 0, i32 0))
  %2 = call double @llvm.pow.f64(double 5.000000e-01, double 3.125000e-02)
  store double %2, double* @y, align 8
  call void @calc_runnable_avg_yN_inv()
  call void @calc_converged_max()
  ret void
}

attributes #0 = { noinline nounwind optnone ssp uwtable "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-jump-tables"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #1 = { "correctly-rounded-divide-sqrt-fp-math"="false" "disable-tail-calls"="false" "less-precise-fpmad"="false" "no-frame-pointer-elim"="true" "no-frame-pointer-elim-non-leaf" "no-infs-fp-math"="false" "no-nans-fp-math"="false" "no-signed-zeros-fp-math"="false" "no-trapping-math"="false" "stack-protector-buffer-size"="8" "target-cpu"="penryn" "target-features"="+cx16,+fxsr,+mmx,+sahf,+sse,+sse2,+sse3,+sse4.1,+ssse3,+x87" "unsafe-fp-math"="false" "use-soft-float"="false" }
attributes #2 = { nounwind readnone speculatable }

!llvm.module.flags = !{!0, !1}
!llvm.ident = !{!2}

!0 = !{i32 1, !"wchar_size", i32 4}
!1 = !{i32 7, !"PIC Level", i32 2}
!2 = !{!"clang version 7.0.0 (tags/RELEASE_700/final)"}
