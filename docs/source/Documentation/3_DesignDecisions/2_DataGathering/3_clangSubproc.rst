Compiling C Source to Various Formats
*************************************

The ClangCompiler class compiles indicated C Source files into a the following
formats: elf executable, x86 assembly, optimized and unoptimized LLVM. The class
compiles the C source files listed in a txt file generated by the user. The compiled
files are stored in a folder specified by the user, and the new file names are
listed in an output file specified by the user. There is an option to also create
a list of C files that successfully compiled.

After this class generates the specified files, those files will populate the database
that will be used to train the ML Agent.

---------------------------------------------------------------------------------------------------

Choice of file type
    The file types were chosen to correspond with how we wanted to train the ML
    Agent. We have considered a variety of options, as will beoutlined in the ML
    Design Decision

---------------------------------------------------------------------------------------------------

Using optimized and unoptimized LLVM to train the ML Agent
    This approach has been chosen due to its ease of implementation. The ML Agent will attempt to bring optimized LLVM into unoptimized LLVM. The will allow it to transform any LLVM that is generated by lifting Clang-made executables. However, using  optimized LLVM as input heavily biases the model. The model will not be trained on realistic data. Additionally, more reasearch needs to be done to determine what other transformations are applied to the LLVM besides optimizations.

---------------------------------------------------------------------------------------------------

Default optimization level is none
    The default optimization level if not specified by the user is none. This does not mean that no passes are made. Rather, this level does the same passes that would be performed if a user did not include an optimization flag, and that is why it was chosem. The ability to change the optimization levels is provided in case it is later decided that this is insufficient. Level two (-O2, or -O) is the recommended opt-level to be used in that case, as this is the default used when ooptimization is specified, but no level is specified.
    Source on LLVM Default Opt-Levels: https://clang.llvm.org/docs/ClangCommandLineReference.html#optimization-level

---------------------------------------------------------------------------------------------------

New location can be automatically created
    If the folder to hold the generated LLVM files does not exists, it can be specified and generated by the LLVM generator. This is to allow the folder structure to be built while using the tool. This can allow greater flixibility, perhaps allowing certain part of the data base to be stored in some folders and while others are stored elsewhere.

---------------------------------------------------------------------------------------------------

A video demoing the use of the tool is below:

.. raw:: html

    <video controls src="_static/videos/compileC.mp4"></video>
